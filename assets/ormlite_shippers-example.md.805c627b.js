import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const g='{"title":"OrmLite walk through example","description":"","frontmatter":{"title":"OrmLite walk through example"},"headers":[{"level":2,"title":"Creating tables","slug":"creating-tables"},{"level":2,"title":"Transaction Support","slug":"transaction-support"},{"level":2,"title":"CRUD Operations","slug":"crud-operations"},{"level":2,"title":"Performing custom queries","slug":"performing-custom-queries"},{"level":2,"title":"Soft Deletes","slug":"soft-deletes"},{"level":2,"title":"Check Constraints","slug":"check-constraints"},{"level":3,"title":"Bitwise operators","slug":"bitwise-operators"}],"relativePath":"ormlite/shippers-example.md","lastUpdated":1645007721717}',p={},o=t(`<p>In its simplest usage, OrmLite can persist any POCO type without any attributes required:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleExample</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Set once before use (i.e. in a static constructor).</span>
OrmLiteConfig<span class="token punctuation">.</span>DialectProvider <span class="token operator">=</span> SqliteDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">IDbConnection</span> db <span class="token operator">=</span> <span class="token string">&quot;/path/to/db.sqlite&quot;</span><span class="token punctuation">.</span><span class="token function">OpenDbConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleExample<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleExample</span> <span class="token punctuation">{</span> Id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleExample<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> Has<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>To get a better idea of the features of OrmLite lets walk through a complete example using sample tables from the Northwind database. _ (Full source code for this example is <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/blob/master/tests/ServiceStack.OrmLite.Tests/ShippersExample.cs" target="_blank" rel="noopener noreferrer">available here</a>.) _</p><p>So with no other configuration using only the classes below:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Shippers&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shipper</span>
	<span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasId<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ShipperID&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CompanyName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Phone <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ShipperType</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ShipperTypeId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ShipperTypes&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShipperType</span>
	<span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHasId<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Alias</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ShipperTypeID&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Index</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubsetOfShipper</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ShipperId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CompanyName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShipperTypeCount</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ShipperTypeId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Total <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="creating-tables" tabindex="-1">Creating tables <a class="header-anchor" href="#creating-tables" aria-hidden="true">#</a></h2><p>Creating tables is a simple 1-liner:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">IDbConnection</span> db <span class="token operator">=</span> <span class="token string">&quot;:memory:&quot;</span><span class="token punctuation">.</span><span class="token function">OpenDbConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShipperType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* In debug mode the line above prints:
DEBUG: CREATE TABLE &quot;ShipperTypes&quot; 
(
  &quot;ShipperTypeID&quot; INTEGER PRIMARY KEY AUTOINCREMENT, 
  &quot;Name&quot; VARCHAR(40) NOT NULL 
);
DEBUG: CREATE UNIQUE INDEX uidx_shippertypes_name ON &quot;ShipperTypes&quot; (&quot;Name&quot; ASC);
DEBUG: CREATE TABLE &quot;Shippers&quot; 
(
  &quot;ShipperID&quot; INTEGER PRIMARY KEY AUTOINCREMENT, 
  &quot;CompanyName&quot; VARCHAR(40) NOT NULL, 
  &quot;Phone&quot; VARCHAR(24) NULL, 
  &quot;ShipperTypeId&quot; INTEGER NOT NULL, 

  CONSTRAINT &quot;FK_Shippers_ShipperTypes&quot; FOREIGN KEY (&quot;ShipperTypeId&quot;) REFERENCES &quot;ShipperTypes&quot; (&quot;ShipperID&quot;) 
);
DEBUG: CREATE UNIQUE INDEX uidx_shippers_companyname ON &quot;Shippers&quot; (&quot;CompanyName&quot; ASC);
*/</span>
</code></pre></div><h2 id="transaction-support" tabindex="-1">Transaction Support <a class="header-anchor" href="#transaction-support" aria-hidden="true">#</a></h2><p>As we have direct access to IDbCommand and friends - playing with transactions is easy:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> trainsType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShipperType</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Trains&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> planesType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShipperType</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Planes&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//Playing with transactions</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">IDbTransaction</span> dbTrans <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">OpenTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>trainsType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>planesType<span class="token punctuation">)</span><span class="token punctuation">;</span>

    dbTrans<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">IDbTransaction</span> dbTrans <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">OpenTransaction</span><span class="token punctuation">(</span>IsolationLevel<span class="token punctuation">.</span>ReadCommitted<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShipperType</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Automobiles&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShipperType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShipperType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Has<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="crud-operations" tabindex="-1">CRUD Operations <a class="header-anchor" href="#crud-operations" aria-hidden="true">#</a></h2><p>No ORM is complete without the standard crud operations:</p><div class="language-csharp"><pre><code>	<span class="token comment">//Performing standard Insert&#39;s and Selects</span>
  db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Shipper</span> <span class="token punctuation">{</span> CompanyName <span class="token operator">=</span> <span class="token string">&quot;Trains R Us&quot;</span><span class="token punctuation">,</span> Phone <span class="token operator">=</span> <span class="token string">&quot;555-TRAINS&quot;</span><span class="token punctuation">,</span> ShipperTypeId <span class="token operator">=</span> trainsType<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Shipper</span> <span class="token punctuation">{</span> CompanyName <span class="token operator">=</span> <span class="token string">&quot;Planes R Us&quot;</span><span class="token punctuation">,</span> Phone <span class="token operator">=</span> <span class="token string">&quot;555-PLANES&quot;</span><span class="token punctuation">,</span> ShipperTypeId <span class="token operator">=</span> planesType<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Shipper</span> <span class="token punctuation">{</span> CompanyName <span class="token operator">=</span> <span class="token string">&quot;We do everything!&quot;</span><span class="token punctuation">,</span> Phone <span class="token operator">=</span> <span class="token string">&quot;555-UNICORNS&quot;</span><span class="token punctuation">,</span> ShipperTypeId <span class="token operator">=</span> planesType<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name"><span class="token keyword">var</span></span> trainsAreUs <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;ShipperTypeId = @Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> trainsType<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>trainsAreUs<span class="token punctuation">.</span>CompanyName<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Trains R Us&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;CompanyName = @company OR Phone = @phone&quot;</span><span class="token punctuation">,</span> 
        <span class="token keyword">new</span> <span class="token punctuation">{</span> company <span class="token operator">=</span> <span class="token string">&quot;Trains R Us&quot;</span><span class="token punctuation">,</span> phone <span class="token operator">=</span> <span class="token string">&quot;555-UNICORNS&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;ShipperTypeId = @Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> planesType<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//Lets update a record</span>
  trainsAreUs<span class="token punctuation">.</span>Phone <span class="token operator">=</span> <span class="token string">&quot;666-TRAINS&quot;</span><span class="token punctuation">;</span>
  db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>trainsAreUs<span class="token punctuation">)</span><span class="token punctuation">;</span>
          Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>trainsAreUs<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span>Phone<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;666-TRAINS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">//Then make it dissappear</span>
  db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>trainsAreUs<span class="token punctuation">)</span><span class="token punctuation">;</span>
          Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>trainsAreUs<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span> Is<span class="token punctuation">.</span>Null<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//And bring it back again</span>
  db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>trainsAreUs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="performing-custom-queries" tabindex="-1">Performing custom queries <a class="header-anchor" href="#performing-custom-queries" aria-hidden="true">#</a></h2><p>And with access to raw sql when you need it - the database is your oyster \u{1F603}</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> partialColumns <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SubsetOfShipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Shipper</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;ShipperTypeId = @Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> planesType<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>partialColumns<span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Select into another POCO class that matches sql</span>
<span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShipperTypeCount<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT ShipperTypeId, COUNT(*) AS Total FROM Shippers GROUP BY ShipperTypeId ORDER BY COUNT(*)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ShipperTypeId<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span>trainsType<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Total<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ShipperTypeId<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span>planesType<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Total<span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//And finally lets quickly clean up the mess we&#39;ve made:</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShipperType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Shipper<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShipperType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Has<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="soft-deletes" tabindex="-1">Soft Deletes <a class="header-anchor" href="#soft-deletes" aria-hidden="true">#</a></h2><p>Select Filters let you specify a custom <code>SelectFilter</code> that lets you modify queries that use <code>SqlExpression&lt;T&gt;</code> before they&#39;re executed. This could be used to make working with &quot;Soft Deletes&quot; Tables easier where it can be made to apply a custom <code>x.IsDeleted != true</code> condition on every <code>SqlExpression</code>.</p><p>By either using a <code>SelectFilter</code> on concrete POCO Table Types, e.g:</p><div class="language-csharp"><pre><code>SqlExpression<span class="token operator">&lt;</span>Table1<span class="token operator">&gt;</span><span class="token punctuation">.</span>SelectFilter <span class="token operator">=</span> q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsDeleted <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SqlExpression<span class="token operator">&lt;</span>Table2<span class="token operator">&gt;</span><span class="token punctuation">.</span>SelectFilter <span class="token operator">=</span> q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsDeleted <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or alternatively using generic delegate that applies to all SqlExpressions, but you&#39;ll only have access to a <code>IUntypedSqlExpression</code> which offers a limited API surface area but will still let you execute a custom filter for all <code>SqlExpression&lt;T&gt;</code> that could be used to add a condition for all tables implementing a custom <code>ISoftDelete</code> interface with:</p><div class="language-csharp"><pre><code>OrmLiteConfig<span class="token punctuation">.</span>SqlExpressionSelectFilter <span class="token operator">=</span> q <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>ModelDef<span class="token punctuation">.</span>ModelType<span class="token punctuation">.</span><span class="token function">HasInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ISoftDelete</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ISoftDelete<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsDeleted <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Both solutions above will transparently add the <code>x.IsDeleted != true</code> to all <code>SqlExpression&lt;T&gt;</code> based queries so it only returns results which aren&#39;t <code>IsDeleted</code> from any of queries below:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="check-constraints" tabindex="-1">Check Constraints <a class="header-anchor" href="#check-constraints" aria-hidden="true">#</a></h2><p>OrmLite includes support for <a href="https://en.wikipedia.org/wiki/Check_constraint" target="_blank" rel="noopener noreferrer">SQL Check Constraints</a> which will create your Table schema with the <code>[CheckConstraint]</code> specified, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CheckConstraint</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Age &gt; 1&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CheckConstraint</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Name IS NOT NULL&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="bitwise-operators" tabindex="-1">Bitwise operators <a class="header-anchor" href="#bitwise-operators" aria-hidden="true">#</a></h3><p>The Typed SqlExpression bitwise operations support depends on the RDBMS used.</p><p>E.g. all RDBMS&#39;s support Bitwise <code>And</code> and <code>Or</code> operators:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Flags <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Flags <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>All RDBMS Except for SQL Server support bit shift operators:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Flags <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Flags <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Whilst only SQL Server and MySQL Support Exclusive Or:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Flags <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,36),e=[o];function c(u,l,i,k,r,d){return a(),s("div",null,e)}var h=n(p,[["render",c]]);export{g as __pageData,h as default};
