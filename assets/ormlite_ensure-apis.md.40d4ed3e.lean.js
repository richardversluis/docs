import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const g='{"title":"OrmLite Ensure APIs","description":"","frontmatter":{"title":"OrmLite Ensure APIs"},"headers":[{"level":2,"title":"Typed API","slug":"typed-api"},{"level":2,"title":"Custom Parameterized SQL Expression","slug":"custom-parameterized-sql-expression"},{"level":2,"title":"Multiple Ensure expressions","slug":"multiple-ensure-expressions"}],"relativePath":"ormlite/ensure-apis.md","lastUpdated":1645007721717}',p={},e=t(`__VP_STATIC_START__<p>The <code>Ensure()</code> API on OrmLite&#39;s typed <code>SqlExpression&lt;T&gt;</code> can be used to ensure that a condition is always applied irrespective of other conditions, e.g:</p><h2 id="typed-api" tabindex="-1">Typed API <a class="header-anchor" href="#typed-api" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">Ensure</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//always applied</span>

<span class="token comment">//...</span>
q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LivingStatus <span class="token operator">==</span> LivingStatus<span class="token punctuation">.</span>Dead<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="custom-parameterized-sql-expression" tabindex="-1">Custom Parameterized SQL Expression <a class="header-anchor" href="#custom-parameterized-sql-expression" aria-hidden="true">#</a></h2><p>Custom SQL Ensure parameterized expressions:</p><div class="language-csharp"><pre><code> q<span class="token punctuation">.</span><span class="token function">Ensure</span><span class="token punctuation">(</span><span class="token string">&quot;Id = {0}&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h2 id="multiple-ensure-expressions" tabindex="-1">Multiple Ensure expressions <a class="header-anchor" href="#multiple-ensure-expressions" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>Id <span class="token operator">==</span> a<span class="token punctuation">.</span>RockstarId<span class="token punctuation">)</span><span class="token punctuation">;</span>

q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ensure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rockstar<span class="token punctuation">,</span>RockstarAlbum<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>a<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Nevermind&quot;</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>Id <span class="token operator">==</span> a<span class="token punctuation">.</span>RockstarId<span class="token punctuation">)</span><span class="token punctuation">;</span>

q<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LivingStatus <span class="token operator">==</span> LivingStatus<span class="token punctuation">.</span>Dead<span class="token punctuation">)</span><span class="token punctuation">;</span>

q<span class="token punctuation">.</span><span class="token function">Ensure</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>These APIs are useful for mandatory filters like &quot;Soft Deletes&quot; and Multitenant records.</p>__VP_STATIC_END__`,9),o=[e];function c(u,l,i,r,k,d){return a(),s("div",null,o)}var h=n(p,[["render",c]]);export{g as __pageData,h as default};
