import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const g='{"title":"OrmLite UPDATE APIs","description":"","frontmatter":{"title":"OrmLite UPDATE APIs"},"headers":[{"level":2,"title":"Updates","slug":"updates"},{"level":2,"title":"UpdateOnly","slug":"updateonly"},{"level":2,"title":"Updating existing values","slug":"updating-existing-values"},{"level":2,"title":"Update by Dictionary","slug":"update-by-dictionary"},{"level":2,"title":"UpdateOnly by Dictionary","slug":"updateonly-by-dictionary"}],"relativePath":"ormlite/apis/update.md","lastUpdated":1645007721713}',p={},o=t(`__VP_STATIC_START__<p>To see the behaviour of the different APIs, the examples below uses the following data models:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Track</span> 
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ArtistId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Album <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Year <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="updates" tabindex="-1">Updates <a class="header-anchor" href="#updates" aria-hidden="true">#</a></h2><p>Updating any model without any filters will update every field, except the <strong>Id</strong> which is used to filter the update to this specific record:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;Jimi&quot;</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Example updating existing data model in-place:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> alive <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Alive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
alive<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Still Alive&quot;</span><span class="token punctuation">;</span>
alive<span class="token punctuation">.</span>Year <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>alive<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Updates all fields except \`Id\` which is used to filter</span>
<span class="token class-name"><span class="token keyword">var</span></span> updatedTrackById <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>alive<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you supply your own where expression, it updates every field (inc. Id) but uses your filter instead:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>One way to limit the fields which gets updated is to use an <strong>Anonymous Type</strong>:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Update</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Updates ALL fields matching specified filter:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Track</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Partially Alive...&quot;</span><span class="token punctuation">,</span> ArtistId <span class="token operator">=</span> alive<span class="token punctuation">.</span>ArtistId <span class="token punctuation">}</span><span class="token punctuation">,</span> 
	<span class="token keyword">where</span><span class="token punctuation">:</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Still Alive...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Or by using <code>UpdateNonDefaults</code> which only updates the non-default values in your model using the filter specified:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateNonDefaults</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Update only fields in anonymous type:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Update</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> Year <span class="token operator">=</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Multi update example:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> pearlJamTracks <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ArtistId <span class="token operator">==</span> alive<span class="token punctuation">.</span>ArtistId<span class="token punctuation">)</span><span class="token punctuation">;</span>
pearlJamTracks<span class="token punctuation">.</span><span class="token function">Each</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Album <span class="token operator">=</span> <span class="token string">&quot;Rear View Mirror (Greatest Hits 1991\u20132003)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>pearlJamTracks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pearlJamTracks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Update by params</span>
</code></pre></div><h2 id="updateonly" tabindex="-1">UpdateOnly <a class="header-anchor" href="#updateonly" aria-hidden="true">#</a></h2><p>As updating a partial row is a common use-case in Db&#39;s, we&#39;ve added a number of methods for just this purpose, named <strong>UpdateOnly</strong>.</p><p>The lambda syntax lets you update only the fields listed in property initializers, e.g:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnly</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The second argument lets you specify a filter for updates:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnly</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Alternatively you can pass in a POCO directly, in which case the first expression in an <code>UpdateOnlyFields</code> statement is used to specify which fields should be updated:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnlyFields</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">UpdateOnlyFields</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> p<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">UpdateOnlyFields</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Age&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When present, the second expression is used as the where filter:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">UpdateOnlyFields</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> 
    <span class="token keyword">where</span><span class="token punctuation">:</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Instead of using the expression filters above you can choose to use an SqlExpression builder which provides more flexibility when you want to programmatically construct the update statement:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">UpdateOnlyFields</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Hendo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Using an Object Dictionary:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> updateFields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UpdateOnlyFields</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>updateFields<span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Using a typed SQL Expression:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FirstName <span class="token operator">==</span> <span class="token string">&quot;Jimi&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
          
db<span class="token punctuation">.</span><span class="token function">UpdateOnlyFields</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;JJ&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">onlyFields</span><span class="token punctuation">:</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updating-existing-values" tabindex="-1">Updating existing values <a class="header-anchor" href="#updating-existing-values" aria-hidden="true">#</a></h2><p>The <code>UpdateAdd</code> API provides several Typed API&#39;s for updating existing values:</p><div class="language-csharp"><pre><code><span class="token comment">//Increase everyone&#39;s Score by 3 points</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Score <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//Remove 5 points from Jackson Score</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Score <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">where</span><span class="token punctuation">:</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Jackson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Graduate everyone and increase everyone&#39;s Score by 2 points </span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Points <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Graduated <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Add 10 points to Michael&#39;s score</span>
<span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FirstName <span class="token operator">==</span> <span class="token string">&quot;Michael&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Points <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//UpdateAdd on non-numeric fields are updated normally:</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Track</span> <span class="token punctuation">{</span> Year <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> Album <span class="token operator">=</span> <span class="token string">&quot;Lost a decade&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Year <span class="token operator">==</span> <span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//Add 10 years to all 1991 Tracks</span>
<span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Track<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Year <span class="token operator">==</span> <span class="token number">1991</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">UpdateAdd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Track</span> <span class="token punctuation">{</span> Year <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Any non-numeric values in an <code>UpdateAdd</code> statement (e.g. strings) are replaced as normal.</p></div><h2 id="update-by-dictionary" tabindex="-1">Update by Dictionary <a class="header-anchor" href="#update-by-dictionary" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token class-name">Person</span> row <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SingleById</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">ToObjectDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Update</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="updateonly-by-dictionary" tabindex="-1">UpdateOnly by Dictionary <a class="header-anchor" href="#updateonly-by-dictionary" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token comment">// By Primary Key Id</span>
<span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UpdateOnly</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// By Custom Where Expression</span>
<span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>FirstName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UpdateOnly</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>LastName <span class="token operator">==</span> <span class="token string">&quot;Hendrix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>__VP_STATIC_END__`,43),e=[o];function c(u,l,k,i,r,d){return a(),s("div",null,e)}var y=n(p,[["render",c]]);export{g as __pageData,y as default};
