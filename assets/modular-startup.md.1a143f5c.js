import{_ as s,c as a,o as t,a as n,b as p}from"./app.64b20f26.js";const y='{"title":"Modular Startup","description":"","frontmatter":{"slug":"modular-startup","title":"Modular Startup"},"headers":[{"level":2,"title":"Module composition using mix","slug":"module-composition-using-mix"},{"level":3,"title":"ConfigureAppHost","slug":"configureapphost"},{"level":3,"title":"Customize AppHost at different Startup Lifecycles","slug":"customize-apphost-at-different-startup-lifecycles"},{"level":3,"title":"Removing Features","slug":"removing-features"},{"level":2,"title":"Migrating to HostingStartup","slug":"migrating-to-hostingstartup"},{"level":3,"title":"Step 1","slug":"step-1"},{"level":3,"title":"Step 2","slug":"step-2"},{"level":3,"title":"Step 3","slug":"step-3"},{"level":3,"title":"Step 4","slug":"step-4"},{"level":3,"title":"Step 5","slug":"step-5"}],"relativePath":"modular-startup.md","lastUpdated":1645007721713}',e={},o=n(`<div class="info custom-block"><p class="custom-block-title">INFO</p><p>For more information on the previous Modular Startup used in ServiceStack <strong>v5.x</strong> see our <a href="/modular-startup-legacy">Legacy Modular Startup</a> docs</p></div><p>Taking advantage of C# 9 top level statements and .NET 6 <a href="https://gist.github.com/davidfowl/0e0372c3c1d895c3ce195ba983b1e03d" target="_blank" rel="noopener noreferrer">WebApplication Hosting Model</a>, ServiceStack templates by utilize both these features to simplify configuring your AppHost in a modular way.</p><p><code>Program.cs</code> becomes a script-like file since C# 9 top level statements are generating application entry point implicitly.</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The application <code>AppHost</code> hooks into startup using <code>HostingStartup</code> assembly attribute. In ServiceStack templates, this uses the file name prefix of <code>Configure.*.cs</code> to help identify these startup modules.</p><p>All ServiceStack&#39;s features are loaded using .NET&#39;s <code>HostingStartup</code>, including ServiceStack&#39;s <code>AppHost</code> itself that&#39;s now being configured in <a href="https://github.com/NetCoreTemplates/web/blob/master/MyApp/Configure.AppHost.cs" target="_blank" rel="noopener noreferrer">Configure.AppHost.cs</a>, e.g:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyApp<span class="token punctuation">.</span>AppHost</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyApp</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppHost</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AppHostBase</span><span class="token punctuation">,</span> <span class="token class-name">IHostingStartup</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// Configure ASP .NET Core IOC Dependencies</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>app <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// Configure ASP .NET Core App</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>HasInit<span class="token punctuation">)</span>
                app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token string">&quot;MyApp&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyServices</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Container</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Configure ServiceStack only IOC, Config &amp; Plugins</span>
        <span class="token function">SetConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HostConfig</span> <span class="token punctuation">{</span>
            UseSameSiteCookies <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The use of Modular Startup does not change the AppHost declaration, but enables the modular grouping of configuration concerns. Different features are encapsulated together allowing them to be more easily updated or replaced, e.g. each feature could be temporarily disabled by commenting out its assembly HostingStartup&#39;s attribute, including ServiceStack itself:</p><div class="language-csharp"><pre><code><span class="token comment">//[assembly: HostingStartup(typeof(MyApp.AppHost))]</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Reason for only conditionally registering ServiceStack with <code>if (!HasInit)</code> is to allow other plugins (like Auth) the opportunity to precisely control where ServiceStack is registered within its preferred ASP .NET Core&#39;s pipeline</p></div><h2 id="module-composition-using-mix" tabindex="-1">Module composition using <code>mix</code> <a class="header-anchor" href="#module-composition-using-mix" aria-hidden="true">#</a></h2><p>This has enabled ServiceStack Apps to be easily composed with the features developers need in mind. Either at project creation with <a href="http://servicestack.net/start" target="_blank" rel="noopener noreferrer">servicestack.net/start</a> page or after a project&#39;s creation where features can easily be added and removed using the command-line <a href="/mix-tool">mix tool</a>.</p><p>.NET 6&#39;s idiom is incorporated into the <a href="https://gist.github.com/gistlyn/9b32b03f207a191099137429051ebde8" target="_blank" rel="noopener noreferrer">mix gist config files</a> to adopt its <code>HostingStartup</code> which is better able to load modular Startup configuration without assembly scanning.</p><p>This is a standard ASP .NET Core feature that we can use to configure Mongo DB in any ASP .NET Core App with:</p><div class="language-bash"><pre><code>$ x mix mongodb
</code></pre></div><p>Which adds the <code>mongodb</code> gist file contents to your ASP .NET Core Host project:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">MongoDB<span class="token punctuation">.</span>Driver</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyApp<span class="token punctuation">.</span>ConfigureMongoDb</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyApp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureMongoDb</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
            <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MongoClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">IMongoDatabase</span> mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;MyApp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>mongoDatabase<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre></div><p>As it&#39;s not a ServiceStack feature it can be used to configure ASP .NET Core Apps with any feature, e.g. we could also easily configure <a href="https://martendb.io" target="_blank" rel="noopener noreferrer">Marten</a> in an ASP .NET Core App with:</p><div class="language-bash"><pre><code>$ x mix marten
</code></pre></div><p>The benefit of this approach is entire modules of features can be configured in a single command, e.g. An empty ServiceStack App can be configured with MongoDB, ServiceStack Auth and a MongoDB Auth Repository with a single command:</p><div class="language-bash"><pre><code>$ x mix auth auth-mongodb mongodb
</code></pre></div><p>Likewise, you can replace MongoDB with a completely different PostgreSQL RDBMS implementation by running:</p><div class="language-bash"><pre><code>$ x mix auth auth-db postgres
</code></pre></div><h3 id="configureapphost" tabindex="-1">ConfigureAppHost <a class="header-anchor" href="#configureapphost" aria-hidden="true">#</a></h3><p>Looking deeper, we can see where we&#39;re plugins are able to configure ServiceStack via the <code>.ConfigureAppHost()</code> extension method:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyApp<span class="token punctuation">.</span>ConfigureAuth</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyApp</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Add any additional metadata properties you want to store in the Users Typed Session</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUserSession</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthUserSession</span></span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// Custom Validator to add custom validators to built-in /register Service requiring DisplayName and ConfirmPassword</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRegistrationValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">RegistrationValidator</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">CustomRegistrationValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">RuleSet</span><span class="token punctuation">(</span>ApplyTo<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>DisplayName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ConfirmPassword<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureAuth</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
            <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">//services.AddSingleton&lt;ICacheClient&gt;(new MemoryCacheClient()); //Store User Sessions in Memory Cache (default)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> appSettings <span class="token operator">=</span> appHost<span class="token punctuation">.</span>AppSettings<span class="token punctuation">;</span>
                appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthFeature</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomUserSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IAuthProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CredentialsAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">/* Sign In with Username / Password credentials */</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FacebookAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/* Create App https://developers.facebook.com/apps */</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GoogleAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">/* Create App https://console.developers.google.com/apis/credentials */</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MicrosoftGraphAuthProvider</span><span class="token punctuation">(</span>appSettings<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">/* Create App https://apps.dev.microsoft.com */</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RegistrationFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Enable /register Service</span>

                <span class="token comment">//override the default registration validation with your own custom implementation</span>
                appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterAs</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomRegistrationValidator<span class="token punctuation">,</span> IValidator<span class="token punctuation">&lt;</span>Register<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>By default, any AppHost configuration is called before <code>AppHost.Configure()</code> is run, the AppHost can be further customized after its run:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyApp<span class="token punctuation">.</span>ConfigureAuthRepository</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyApp</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Custom User Table with extended Metadata properties</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UserAuth</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ProfileUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastLoginIp <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> LastLoginDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppUserAuthEvents</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthEvents</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAuthenticated</span><span class="token punctuation">(</span><span class="token class-name">IRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">IAuthSession</span> session<span class="token punctuation">,</span> <span class="token class-name">IServiceBase</span> authService<span class="token punctuation">,</span> 
            <span class="token class-name">IAuthTokens</span> tokens<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> authInfo<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> authRepo <span class="token operator">=</span> HostContext<span class="token punctuation">.</span>AppHost<span class="token punctuation">.</span><span class="token function">GetAuthRepository</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span>authRepo <span class="token keyword">as</span> <span class="token class-name">IDisposable</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> userAuth <span class="token operator">=</span> <span class="token punctuation">(</span>AppUser<span class="token punctuation">)</span>authRepo<span class="token punctuation">.</span><span class="token function">GetUserAuth</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>UserAuthId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                userAuth<span class="token punctuation">.</span>ProfileUrl <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">GetProfileUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                userAuth<span class="token punctuation">.</span>LastLoginIp <span class="token operator">=</span> req<span class="token punctuation">.</span>UserHostAddress<span class="token punctuation">;</span>
                userAuth<span class="token punctuation">.</span>LastLoginDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>
                authRepo<span class="token punctuation">.</span><span class="token function">SaveUserAuth</span><span class="token punctuation">(</span>userAuth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureAuthRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
            <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrmLiteAuthRepository<span class="token punctuation">&lt;</span>AppUser<span class="token punctuation">,</span> UserAuthDetails<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDbConnectionFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    UseDistinctRoleTables <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> authRepo <span class="token operator">=</span> appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                authRepo<span class="token punctuation">.</span><span class="token function">InitSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// CreateUser(authRepo, &quot;admin@email.com&quot;, &quot;Admin User&quot;, &quot;p@55wOrd&quot;, roles:new[]{ RoleNames.Admin });</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">afterConfigure</span><span class="token punctuation">:</span> appHost <span class="token operator">=&gt;</span> 
                appHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AssertPlugin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AuthFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AuthEvents<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppUserAuthEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add initial Users to the configured Auth Repository</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token class-name">IAuthRepository</span> authRepo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> roles<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>authRepo<span class="token punctuation">.</span><span class="token function">GetUserAuthByUserName</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> newAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppUser</span> <span class="token punctuation">{</span> Email <span class="token operator">=</span> email<span class="token punctuation">,</span> DisplayName <span class="token operator">=</span> name <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> authRepo<span class="token punctuation">.</span><span class="token function">CreateUserAuth</span><span class="token punctuation">(</span>newAdmin<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
                authRepo<span class="token punctuation">.</span><span class="token function">AssignRoles</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> roles<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="customize-apphost-at-different-startup-lifecycles" tabindex="-1">Customize AppHost at different Startup Lifecycles <a class="header-anchor" href="#customize-apphost-at-different-startup-lifecycles" aria-hidden="true">#</a></h3><p>To cater for all plugins, AppHost configurations can be registered at different stages within the AppHost&#39;s initialization:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> builder
    <span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>
        <span class="token named-parameter punctuation">beforeConfigure</span><span class="token punctuation">:</span>    appHost <span class="token operator">=&gt;</span> <span class="token comment">/* fired before AppHost.Configure() */</span><span class="token punctuation">,</span> 
        <span class="token named-parameter punctuation">afterConfigure</span><span class="token punctuation">:</span>     appHost <span class="token operator">=&gt;</span> <span class="token comment">/* fired after AppHost.Configure() */</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">afterPluginsLoaded</span><span class="token punctuation">:</span> appHost <span class="token operator">=&gt;</span> <span class="token comment">/* fired after plugins are loaded */</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">afterAppHostInit</span><span class="token punctuation">:</span>   appHost <span class="token operator">=&gt;</span> <span class="token comment">/* fired after AppHost has initialized */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="removing-features" tabindex="-1">Removing Features <a class="header-anchor" href="#removing-features" aria-hidden="true">#</a></h3><p>The benefits of adopting a modular approach to AppHost configuration is the same as general organizational code structure which results in better decoupling and cohesion where it&#39;s easier to determine all the dependencies of a feature, easier to update, less chance of unintended side effects, easier to share standard configuration amongst multiple projects and easier to remove the feature entirely, either temporarily if needing to isolate &amp; debug a runtime issue by:</p><div class="language-csharp"><pre><code><span class="token comment">// [assembly: HostingStartup(typeof(MyApp.ConfigureAuth))]</span>
</code></pre></div><p>Or easier to permanently replace or remove features by either directly deleting the isolated <code>*.cs</code> source files or by undoing mixing in the feature using <code>mix -delete</code>, e.g:</p><div class="language-bash"><pre><code>$ x mix -delete auth auth-db postgres
</code></pre></div><p>Which works similar to package managers where it removes all files contained within each mix gist.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Please see the <a href="https://gist.github.com/gistlyn/9b32b03f207a191099137429051ebde8#file-mix_howto-md" target="_blank" rel="noopener noreferrer">Mix HowTo</a> to find out how you can contribute your own gist mix features</p></div><h2 id="migrating-to-hostingstartup" tabindex="-1">Migrating to HostingStartup <a class="header-anchor" href="#migrating-to-hostingstartup" aria-hidden="true">#</a></h2><p>As we&#39;ll be using the new <code>HostingStartup</code> model going forward we recommend migrating your existing configuration to use them.</p>`,40),c=p("iframe",{class:"video-hd",src:"https://www.youtube.com/embed/WgsFl0AFUdo",frameborder:"0",allow:"autoplay; encrypted-media",allowfullscreen:""},null,-1),u=n(`<p>To help with this you can refer to the <a href="https://github.com/ServiceStack/mix/commit/b56746622aa1879e3e6a8cbf835e634f05db30db" target="_blank" rel="noopener noreferrer">mix diff</a> showing how each of the existing mix configurations were converted to the new model.</p><p>As a concrete example, lets take a look at the steps used to migrate our Chinook example application <a href="https://github.com/NetCoreApps/Chinook/commit/2758af9deae9c3aa910a27134f95167f7ec6e541" target="_blank" rel="noopener noreferrer">from NET5 using the previous <code>Startup : ModularStartup</code>, to .NET 6 <code>HostingStartup</code></a>.</p><h3 id="step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1" aria-hidden="true">#</a></h3><p>Migrate your existing <code>ConfigureServices</code> and <code>Configure(IApplicationBuilder)</code> from <code>Startup : ModularStartup</code> to the top-level host builder in <code>Program.cs</code>. Eg</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The default HSTS value is 30 days. </span>
    <span class="token comment">// You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>
    app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2" aria-hidden="true">#</a></h3><p>Move your <code>AppHost</code> class to a new <code>Configure.AppHost.cs</code> file.</p><h3 id="step-3" tabindex="-1">Step 3 <a class="header-anchor" href="#step-3" aria-hidden="true">#</a></h3><p>Implement <code>IHostingStartup</code> on your AppHost with automatic initialization. Eg:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>services <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// Configure ASP.NET Core IOC Dependencies</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>app <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// Configure ASP.NET Core App</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>HasInit<span class="token punctuation">)</span>
                app<span class="token punctuation">.</span><span class="token function">UseServiceStack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AppHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="step-4" tabindex="-1">Step 4 <a class="header-anchor" href="#step-4" aria-hidden="true">#</a></h3><p>Declare <code>assembly: HostingStartup</code> for your <code>AppHost</code> in the same <code>Configure.AppHost.cs</code>. Eg:</p><div class="language-csharp"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Chinook<span class="token punctuation">.</span>AppHost</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
</code></pre></div><h3 id="step-5" tabindex="-1">Step 5 <a class="header-anchor" href="#step-5" aria-hidden="true">#</a></h3><p>Migrate each existing modular startup class that implements <code>IConfgiureServices</code> and/or <code>IConfigureApp</code> to use <code>IHostingStartup</code>. Eg:</p><div class="language-csharp"><pre><code><span class="token comment">// net5.0 modular startup</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Chinook</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureAutoQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IConfigureAppHost</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IAppHost</span> appHost<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
                MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
                IncludeTotal <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-csharp"><pre><code><span class="token comment">// net6.0 modular startup using IHostingStartup</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">ServiceStack</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">HostingStartup</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Chinook<span class="token punctuation">.</span>ConfigureAutoQuery</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token keyword">namespace</span> <span class="token namespace">Chinook</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigureAutoQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostingStartup</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">ConfigureAppHost</span><span class="token punctuation">(</span>appHost <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                appHost<span class="token punctuation">.</span>Plugins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutoQueryFeature</span> <span class="token punctuation">{</span>
                    MaxLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>
                    IncludeTotal <span class="token operator">=</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>Remembering also that infrastructure like your <code>Dockerfile</code> or host will likely need the runtimes/SDKs updated as well.</p></blockquote>`,18),l=[o,c,u];function i(r,k,d,m,g,f){return t(),a("div",null,l)}var w=s(e,[["render",i]]);export{y as __pageData,w as default};
