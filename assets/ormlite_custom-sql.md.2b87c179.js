import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const m='{"title":"Custom SQL","description":"","frontmatter":{"title":"Custom SQL"},"headers":[{"level":2,"title":"Custom Selects","slug":"custom-selects"},{"level":2,"title":"Custom Insert and Updates","slug":"custom-insert-and-updates"},{"level":2,"title":"INSERT INTO SELECT","slug":"insert-into-select"},{"level":2,"title":"Foreign Key attribute for referential actions on Update/Deletes","slug":"foreign-key-attribute-for-referential-actions-on-update-deletes"},{"level":2,"title":"System Variables and Default Values","slug":"system-variables-and-default-values"},{"level":2,"title":"Custom SQL using PostgreSQL Arrays","slug":"custom-sql-using-postgresql-arrays"}],"relativePath":"ormlite/custom-sql.md","lastUpdated":1645007721717}',p={},e=t(`<p>OrmLite&#39;s Expression support satisfies the most common RDBMS queries with a strong-typed API. For more complex queries you can easily fall back to raw SQL where the Custom SQL APIs let you map custom SqlExpressions into different responses:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT * FROM Person WHERE Age &lt; @age&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlColumn</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>LastName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlColumn</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT LastName FROM Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnDistinct</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ColumnDistinct</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT Age FROM Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>Sql<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlScalar</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlScalar</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELCT COUNT(*) FROM Person WHERE Age &lt; 50&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="custom-selects" tabindex="-1">Custom Selects <a class="header-anchor" href="#custom-selects" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">CustomPoco</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> Year<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> Max<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> upperNamesWithA <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlColumn</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT upper(Name) FROM Track WHERE instr(Name,&#39;a&#39;) &gt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> meta <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomPoco<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT DISTINCT Year % 10 as Year, hex(Year % 10) as Hex FROM Track&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span><span class="token string">&quot;ALTER TABLE Track ADD Rand INT default 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE Track SET Rand = abs(random()) % 1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> trackRandValues <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Dictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT Name, Rand FROM Track&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> maxRand <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlScalar</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT MAX(Rand) FROM Track&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="custom-insert-and-updates" tabindex="-1">Custom Insert and Updates <a class="header-anchor" href="#custom-insert-and-updates" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code>Db<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO page_stats (ref_id, fav_count) VALUES (@refId, @favCount)&quot;</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token punctuation">{</span> refId<span class="token punctuation">,</span> favCount <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//Async:</span>
Db<span class="token punctuation">.</span><span class="token function">ExecuteSqlAsync</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE page_stats SET view_count = view_count + 1 WHERE id = @id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="insert-into-select" tabindex="-1">INSERT INTO SELECT <a class="header-anchor" href="#insert-into-select" aria-hidden="true">#</a></h2><p>You can use OrmLite&#39;s Typed <code>SqlExpression</code> to create a subselect expression that you can use to create and execute a typed <strong>INSERT INTO SELECT</strong> <code>SqlExpression</code> with:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>UserName <span class="token operator">==</span> <span class="token string">&quot;UserName&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>
        x<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> 
        x<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> 
        GivenName <span class="token operator">=</span> x<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> 
        Surname <span class="token operator">=</span> x<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> 
        FullName <span class="token operator">=</span> x<span class="token punctuation">.</span>FirstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>LastName
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">InsertIntoSelect</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</code></pre></div><h2 id="foreign-key-attribute-for-referential-actions-on-update-deletes" tabindex="-1">Foreign Key attribute for referential actions on Update/Deletes <a class="header-anchor" href="#foreign-key-attribute-for-referential-actions-on-update-deletes" aria-hidden="true">#</a></h2><p>Creating a foreign key in OrmLite can be done by adding <code>[References(typeof(ForeignKeyTable))]</code> on the relation property, which will result in OrmLite creating the Foreign Key relationship when it creates the DB table with <code>db.CreateTable&lt;Poco&gt;</code>.</p><p>Additional fine-grain options and behaviour are available in the <code>[ForeignKey]</code> attribute which will let you specify the desired behaviour when deleting or updating related rows in Foreign Key tables.</p><p>An example of a table with the different available options:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableWithAllCascadeOptions</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoIncrement</span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">References</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ForeignKeyTable1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> SimpleForeignKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ForeignKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ForeignKeyTable2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OnDelete <span class="token operator">=</span> <span class="token string">&quot;CASCADE&quot;</span><span class="token punctuation">,</span> OnUpdate <span class="token operator">=</span> <span class="token string">&quot;CASCADE&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> CascadeOnUpdateOrDelete <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ForeignKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ForeignKeyTable3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OnDelete <span class="token operator">=</span> <span class="token string">&quot;NO ACTION&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> NoActionOnCascade <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Default</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ForeignKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ForeignKeyTable4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OnDelete <span class="token operator">=</span> <span class="token string">&quot;SET DEFAULT&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> SetToDefaultValueOnDelete <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ForeignKey</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ForeignKeyTable5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OnDelete <span class="token operator">=</span> <span class="token string">&quot;SET NULL&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> SetToNullOnDelete <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="system-variables-and-default-values" tabindex="-1">System Variables and Default Values <a class="header-anchor" href="#system-variables-and-default-values" aria-hidden="true">#</a></h2><p>To provide richer support for non-standard default values, each RDBMS Dialect Provider contains a <code>OrmLiteDialectProvider.Variables</code> placeholder dictionary for storing common, but non-standard RDBMS functionality. We can use this to define non-standard default values, in a declarative way, that works across all supported RDBMS&#39;s like automatically populating a column with the RDBMS UTC Date when Inserted with a <code>default(T)</code> Value:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poco</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Default</span><span class="token attribute-arguments"><span class="token punctuation">(</span>OrmLiteVariables<span class="token punctuation">.</span>SystemUtc<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>  <span class="token comment">//= {SYSTEM_UTC}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreatedTimeUtc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>OrmLite variables need to be surrounded with <code>{}</code> braces to identify that it&#39;s a placeholder variable, e.g <code>{SYSTEM_UTC}</code>.</p><p>The <a href="https://github.com/ServiceStack/ServiceStack.OrmLite/blob/master/tests/ServiceStack.OrmLite.Tests/ForeignKeyAttributeTests.cs" target="_blank" rel="noopener noreferrer">ForeignKeyTests</a> show the resulting behaviour with each of these configurations in more detail.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note: Only supported on RDBMS&#39;s with foreign key/referential action support, e.g. <a href="http://msdn.microsoft.com/en-us/library/ms174979.aspx" target="_blank" rel="noopener noreferrer">Sql Server</a>, <a href="http://www.postgresql.org/docs/9.1/static/ddl-constraints.html" target="_blank" rel="noopener noreferrer">PostgreSQL</a>, <a href="http://dev.mysql.com/doc/refman/5.5/en/innodb-foreign-key-constraints.html" target="_blank" rel="noopener noreferrer">MySQL</a>. Otherwise they&#39;re ignored.</p></div><h2 id="custom-sql-using-postgresql-arrays" tabindex="-1">Custom SQL using PostgreSQL Arrays <a class="header-anchor" href="#custom-sql-using-postgresql-arrays" aria-hidden="true">#</a></h2><p>The <code>PgSql.Array()</code> provides a typed API for generating <a href="https://www.postgresql.org/docs/current/arrays.html" target="_blank" rel="noopener noreferrer">PostgreSQL Array Expressions</a>, e.g:</p><div class="language-csharp"><pre><code>PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">//= ARRAY[1,2,3]</span>
<span class="token class-name"><span class="token keyword">var</span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>   <span class="token comment">//= ARRAY[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]</span>
</code></pre></div><p>Which you can safely use in Custom SQL Expressions that use PostgreSQL&#39;s native ARRAY support:</p><div class="language-csharp"><pre><code>q<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>anyTechnologyIds<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &amp;&amp; technology_ids&quot;</span></span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>labelSlugs<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &amp;&amp; labels&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you want and empty collection to return <code>null</code> instead of an empty <code>ARRAY[]</code> you can use the <code>nullIfEmpty</code> overload:</p><div class="language-csharp"><pre><code>PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullIfEmpty</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment">//= null</span>
PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullIfEmpty</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//= ARRAY[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]</span>
</code></pre></div>`,27),o=[e];function c(l,u,i,k,r,d){return a(),s("div",null,o)}var y=n(p,[["render",c]]);export{m as __pageData,y as default};
