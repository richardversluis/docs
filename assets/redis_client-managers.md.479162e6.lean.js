import{_ as e,c as n,o as s,a}from"./app.64b20f26.js";const S='{"title":"Managing connections","description":"","frontmatter":{"slug":"client-managers","title":"Managing connections"},"headers":[{"level":2,"title":"Redis Connection Strings","slug":"redis-connection-strings"},{"level":2,"title":"ServiceStack.Redis SSL Support","slug":"servicestack-redis-ssl-support"},{"level":3,"title":"Connecting to Azure Redis","slug":"connecting-to-azure-redis"},{"level":2,"title":"Redis GEO","slug":"redis-geo"},{"level":2,"title":"Redis Client Managers","slug":"redis-client-managers"},{"level":3,"title":"RedisManagerPool","slug":"redismanagerpool"},{"level":3,"title":"PooledRedisClientManager","slug":"pooledredisclientmanager"},{"level":3,"title":"BasicRedisClientManager","slug":"basicredisclientmanager"},{"level":3,"title":"Accessing the Redis Client","slug":"accessing-the-redis-client"},{"level":3,"title":"Async Redis","slug":"async-redis"}],"relativePath":"redis/client-managers.md","lastUpdated":1645007721741}',t={},i=a(`__VP_STATIC_START__<h2 id="redis-connection-strings" tabindex="-1">Redis Connection Strings <a class="header-anchor" href="#redis-connection-strings" aria-hidden="true">#</a></h2><p>Redis Connection strings have been expanded to support the more versatile URI format which is now able to capture most of Redis Client settings in a single connection string (akin to DB Connection strings).</p><p>Redis Connection Strings supports multiple URI-like formats, from a simple <strong>hostname</strong> or <strong>IP Address and port</strong> pair to a fully-qualified <strong>URI</strong> with multiple options specified on the QueryString.</p><p>Some examples of supported formats:</p><div class="language-"><pre><code>localhost
127.0.0.1:6379
redis://localhost:6379
password@localhost:6379
clientid:password@localhost:6379
redis://clientid:password@localhost:6380?ssl=true&amp;db=1
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>More examples can be seen in <a href="https://github.com/ServiceStack/ServiceStack.Redis/blob/master/tests/ServiceStack.Redis.Tests/ConfigTests.cs" target="_blank" rel="noopener noreferrer">ConfigTests.cs</a></p></div><p>Any additional configuration can be specified as QueryString parameters. The full list of options that can be specified include:</p><table><tr><td><b>Ssl</b></td><td>bool</td><td>If this is an SSL connection</td></tr><tr><td><b>Db</b></td><td>int</td><td>The Redis DB this connection should be set to</td></tr><tr><td><b>Client</b></td><td>string</td><td>A text alias to specify for this connection for analytic purposes</td></tr><tr><td><b>Password</b></td><td>string</td><td>UrlEncoded version of the Password for this connection</td></tr><tr><td><b>ConnectTimeout</b></td><td>int</td><td>Timeout in ms for making a TCP Socket connection</td></tr><tr><td><b>SendTimeout</b></td><td>int</td><td>Timeout in ms for making a synchronous TCP Socket Send</td></tr><tr><td><b>ReceiveTimeout</b></td><td>int</td><td>Timeout in ms for waiting for a synchronous TCP Socket Receive</td></tr><tr><td><b>IdleTimeOutSecs</b></td><td>int</td><td>Timeout in Seconds for an Idle connection to be considered active</td></tr><tr><td><b>NamespacePrefix</b></td><td>string</td><td>Use a custom prefix for ServiceStack.Redis internal index colletions</td></tr></table><h2 id="servicestack-redis-ssl-support" tabindex="-1"><a href="http://docs.servicestack.net/ssl-redis-azure" target="_blank" rel="noopener noreferrer">ServiceStack.Redis SSL Support</a> <a class="header-anchor" href="#servicestack-redis-ssl-support" aria-hidden="true">#</a></h2><p>ServiceStack.Redis supports <strong>SSL connections</strong> making it suitable for accessing remote Redis server instances over a <strong>secure SSL connection</strong>.</p><p><img src="https://github.com/ServiceStack/Assets/raw/master/img/wikis/redis/azure-redis-instance.png" alt="Azure Redis Cache"></p><h4 id="specify-ssl-protocol" tabindex="-1">Specify SSL Protocol <a class="header-anchor" href="#specify-ssl-protocol" aria-hidden="true">#</a></h4><p>Support for changing the Ssl Protocols used for encrypted SSL connections can be set on the connection string using the <code>sslprotocols</code> modifier, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> connString <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;redis://</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Host</span><span class="token punctuation">}</span></span><span class="token string">?ssl=true&amp;sslprotocols=Tls12&amp;password=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Password<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> redisManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisManagerPool</span><span class="token punctuation">(</span>connString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> redisManager<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
</code></pre></div><h3 id="connecting-to-azure-redis" tabindex="-1"><a href="http://docs.servicestack.net/ssl-redis-azure" target="_blank" rel="noopener noreferrer">Connecting to Azure Redis</a> <a class="header-anchor" href="#connecting-to-azure-redis" aria-hidden="true">#</a></h3><p>As connecting to <a href="http://azure.microsoft.com/en-us/services/cache/" target="_blank" rel="noopener noreferrer">Azure Redis Cache</a> via SSL was the primary use-case for this feature, we&#39;ve added a new <a href="http://docs.servicestack.net/ssl-redis-azure" target="_blank" rel="noopener noreferrer">Getting connected to Azure Redis via SSL</a> to help you get started.</p><h2 id="redis-geo" tabindex="-1"><a href="https://github.com/ServiceStackApps/redis-geo" target="_blank" rel="noopener noreferrer">Redis GEO</a> <a class="header-anchor" href="#redis-geo" aria-hidden="true">#</a></h2><p>The <a href="http://antirez.com/news/104" target="_blank" rel="noopener noreferrer">release of Redis 3.2.0</a> brings it exciting new <a href="http://redis.io/commands/geoadd" target="_blank" rel="noopener noreferrer">GEO capabilities</a> which will let you store Lat/Long coordinates in Redis and query locations within a specified radius. To demonstrate this functionality we&#39;ve created a new <a href="https://github.com/ServiceStackApps/redis-geo" target="_blank" rel="noopener noreferrer">Redis GEO Live Demo</a> which lets you click on anywhere in the U.S. to find the list of nearest cities within a given radius, Live Demo at: <a href="https://redis.netcore.io" target="_blank" rel="noopener noreferrer">https://redis.netcore.io</a></p><h2 id="redis-client-managers" tabindex="-1">Redis Client Managers <a class="header-anchor" href="#redis-client-managers" aria-hidden="true">#</a></h2><p>The recommended way to access <code>RedisClient</code> instances is to use one of the available Thread-Safe Client Managers below. Client Managers are connection factories which should be registered as a Singleton either in your IOC or static class.</p><h3 id="redismanagerpool" tabindex="-1">RedisManagerPool <a class="header-anchor" href="#redismanagerpool" aria-hidden="true">#</a></h3><p>With the enhanced Redis URI Connection Strings we&#39;ve been able to simplify and streamline the existing <code>PooledRedisClientManager</code> implementation and have extracted it out into a new clients manager called <code>RedisManagerPool</code>.</p><p>In addition to removing all above options on the Client Manager itself, readonly connection strings have also been removed so the configuration ends up much simpler and more aligned with the common use-case:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisManagerPool</span><span class="token punctuation">(</span>redisConnectionString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>Pooling Behavior</strong></p><p>Any connections required after the maximum Pool size has been reached will be created and disposed outside of the Pool. By not being restricted to a maximum pool size, the pooling behavior in <code>RedisManagerPool</code> can maintain a smaller connection pool size at the cost of potentially having a higher opened/closed connection count.</p><h3 id="pooledredisclientmanager" tabindex="-1">PooledRedisClientManager <a class="header-anchor" href="#pooledredisclientmanager" aria-hidden="true">#</a></h3><p>If you prefer to define options on the Client Manager itself or you want to provide separate Read/Write and ReadOnly (i.e. Master and Replica) redis-servers, use the <code>PooledRedisClientManager</code> instead:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PooledRedisClientManager</span><span class="token punctuation">(</span>redisReadWriteHosts<span class="token punctuation">,</span> redisReadOnlyHosts<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        ConnectTimeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>Pooling Behavior</strong></p><p>The <code>PooledRedisClientManager</code> imposes a maximum connection limit and when its maximum pool size has been reached will instead block on any new connection requests until the next <code>RedisClient</code> is released back into the pool. If no client became available within <code>PoolTimeout</code>, a Pool <code>TimeoutException</code> will be thrown.</p><h4 id="read-only-clients" tabindex="-1">Read Only Clients <a class="header-anchor" href="#read-only-clients" aria-hidden="true">#</a></h4><p>By default resolving a RedisClient with <code>GetRedisClient()</code> or <code>GetRedisClientAsync()</code> will return a client connected to the configured primary (master) host, if you also have replica (slave) hosts configured, you can access it with the <code>GetReadOnlyClient()</code> or <code>GetReadOnlyClientAsync()</code> APIs, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> redisReadOnly <span class="token operator">=</span> clientsManager<span class="token punctuation">.</span><span class="token function">GetReadOnlyClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="basicredisclientmanager" tabindex="-1">BasicRedisClientManager <a class="header-anchor" href="#basicredisclientmanager" aria-hidden="true">#</a></h3><p>If don&#39;t want to use connection pooling (i.e. you&#39;re accessing a local redis-server instance) you can use a basic (non-pooled) Clients Manager which creates a new <code>RedisClient</code> instance each time:</p><div class="language-csharp"><pre><code>container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> 
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicRedisClientManager</span><span class="token punctuation">(</span>redisConnectionString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="accessing-the-redis-client" tabindex="-1">Accessing the Redis Client <a class="header-anchor" href="#accessing-the-redis-client" aria-hidden="true">#</a></h3><p>Once registered, accessing the RedisClient is the same in all Client Managers, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> clientsManager <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IRedisClientsManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> redis <span class="token operator">=</span> clientsManager<span class="token punctuation">.</span><span class="token function">GetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

redis<span class="token punctuation">.</span><span class="token function">IncrementValue</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> days <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">GetAllItemsFromList</span><span class="token punctuation">(</span><span class="token string">&quot;days&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Access Typed API</span>
<span class="token class-name"><span class="token keyword">var</span></span> redisTodos <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Todo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

redisTodos<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Todo</span> <span class="token punctuation">{</span>
    Id <span class="token operator">=</span> redisTodos<span class="token punctuation">.</span><span class="token function">GetNextSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Content <span class="token operator">=</span> <span class="token string">&quot;Learn Redis&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> todo <span class="token operator">=</span> redisTodos<span class="token punctuation">.</span><span class="token function">GetById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Access Native Client</span>
<span class="token class-name"><span class="token keyword">var</span></span> redisNative <span class="token operator">=</span> <span class="token punctuation">(</span>IRedisNativeClient<span class="token punctuation">)</span>redis<span class="token punctuation">;</span>

redisNative<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> days <span class="token operator">=</span> redisNative<span class="token punctuation">.</span><span class="token function">LRange</span><span class="token punctuation">(</span><span class="token string">&quot;days&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>A more detailed list of the available RedisClient APIs used in the example can be seen in the C# interfaces below:</p><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisClientsManager.cs" target="_blank" rel="noopener noreferrer">IRedisClientsManager</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisClient.cs" target="_blank" rel="noopener noreferrer">IRedisClient</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisNativeClient.cs" target="_blank" rel="noopener noreferrer">IRedisNativeClient</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisSubscription.cs" target="_blank" rel="noopener noreferrer">IRedisSubscription</a></li></ul><h4 id="pipeline-transaction-apis" tabindex="-1">Pipeline &amp; Transaction APIs <a class="header-anchor" href="#pipeline-transaction-apis" aria-hidden="true">#</a></h4><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisTransaction.cs" target="_blank" rel="noopener noreferrer">IRedisTransaction</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Pipeline/IRedisPipelineShared.cs" target="_blank" rel="noopener noreferrer">IRedisPipelineShared</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Pipeline/IRedisQueueableOperation.cs" target="_blank" rel="noopener noreferrer">IRedisQueueableOperation</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Pipeline/IRedisQueueCompletableOperation.cs" target="_blank" rel="noopener noreferrer">IRedisQueueCompletableOperation</a></li></ul><h4 id="generic-client-apis" tabindex="-1">Generic Client APIs <a class="header-anchor" href="#generic-client-apis" aria-hidden="true">#</a></h4><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisTypedClient.cs" target="_blank" rel="noopener noreferrer">IRedisTypedClient</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisHash.Generic.cs" target="_blank" rel="noopener noreferrer">IRedisHash</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisList.Generic.cs" target="_blank" rel="noopener noreferrer">IRedisList</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisSet.Generic.cs" target="_blank" rel="noopener noreferrer">IRedisSet</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisSortedSet.Generic.cs" target="_blank" rel="noopener noreferrer">IRedisSortedSet</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisTypedQueueableOperation.cs" target="_blank" rel="noopener noreferrer">IRedisTypedQueueableOperation</a></li></ul><h4 id="server-collection-apis" tabindex="-1">Server Collection APIs <a class="header-anchor" href="#server-collection-apis" aria-hidden="true">#</a></h4><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisHash.cs" target="_blank" rel="noopener noreferrer">IRedisHash</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisList.cs" target="_blank" rel="noopener noreferrer">IRedisList</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisSet.cs" target="_blank" rel="noopener noreferrer">IRedisSet</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisSortedSet.cs" target="_blank" rel="noopener noreferrer">IRedisSortedSet</a></li></ul><h3 id="async-redis" tabindex="-1">Async Redis <a class="header-anchor" href="#async-redis" aria-hidden="true">#</a></h3><p>The async support in ServiceStack.Redis is designed for optimal efficiency and uses <code>ValueTask</code> &amp; other modern Async APIs only available in <strong>.NET Standard 2.0</strong> and <strong>.NET Framework v4.7.2+</strong> projects where there&#39;s async API equivalents for most sync APIs as contained within the Async Redis interfaces below:</p><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisClientsManagerAsync.cs" target="_blank" rel="noopener noreferrer">IRedisClientsManagerAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisClientAsync.cs" target="_blank" rel="noopener noreferrer">IRedisClientAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisNativeClientAsync.cs" target="_blank" rel="noopener noreferrer">IRedisNativeClientAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisSubscriptionAsync.cs" target="_blank" rel="noopener noreferrer">IRedisSubscriptionAsync</a></li></ul><h4 id="async-pipeline-transaction-apis" tabindex="-1">Async Pipeline &amp; Transaction APIs <a class="header-anchor" href="#async-pipeline-transaction-apis" aria-hidden="true">#</a></h4><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisTransactionAsync.cs" target="_blank" rel="noopener noreferrer">IRedisTransactionAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Pipeline/IRedisPipelineSharedAsync.cs" target="_blank" rel="noopener noreferrer">IRedisPipelineSharedAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Pipeline/IRedisQueueableOperationAsync.cs" target="_blank" rel="noopener noreferrer">IRedisQueueableOperationAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Pipeline/IRedisQueueCompletableOperationAsync.cs" target="_blank" rel="noopener noreferrer">IRedisQueueCompletableOperationAsync</a></li></ul><h4 id="async-generic-client-apis" tabindex="-1">Async Generic Client APIs <a class="header-anchor" href="#async-generic-client-apis" aria-hidden="true">#</a></h4><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisTypedClientAsync.cs" target="_blank" rel="noopener noreferrer">IRedisTypedClientAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisHash.Generic.Async.cs" target="_blank" rel="noopener noreferrer">IRedisHashAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisList.Generic.Async.cs" target="_blank" rel="noopener noreferrer">IRedisListAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisSet.Generic.Async.cs" target="_blank" rel="noopener noreferrer">IRedisSetAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisSortedSet.Generic.Async.cs" target="_blank" rel="noopener noreferrer">IRedisSortedSetAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisTypedTransactionAsync.cs" target="_blank" rel="noopener noreferrer">IRedisTypedTransactionAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/Generic/IRedisTypedQueueableOperationAsync.cs" target="_blank" rel="noopener noreferrer">IRedisTypedQueueableOperationAsync</a></li></ul><h4 id="async-server-collection-apis" tabindex="-1">Async Server Collection APIs <a class="header-anchor" href="#async-server-collection-apis" aria-hidden="true">#</a></h4><ul><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisHashAsync.cs" target="_blank" rel="noopener noreferrer">IRedisHashAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisListAsync.cs" target="_blank" rel="noopener noreferrer">IRedisListAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisSetAsync.cs" target="_blank" rel="noopener noreferrer">IRedisSetAsync</a></li><li><a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisSortedSetAsync.cs" target="_blank" rel="noopener noreferrer">IRedisSortedSetAsync</a></li></ul>__VP_STATIC_END__`,57),r=[i];function c(o,p,l,d,u,k){return s(),n("div",null,r)}var g=e(t,[["render",c]]);export{S as __pageData,g as default};
