import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const g='{"title":"Redis Managed Pub/Sub Server","description":"","frontmatter":{"slug":"pubsub","title":"Redis Managed Pub/Sub Server"},"headers":[{"level":3,"title":"Usage","slug":"usage"}],"relativePath":"redis/pubsub.md","lastUpdated":1645007721741}',e={},p=t(`__VP_STATIC_START__<p>The Pub/Sub engine powering <a href="https://github.com/ServiceStack/ServiceStack/wiki/Redis-Server-Events" target="_blank" rel="noopener noreferrer">Redis ServerEvents</a> and <a href="https://github.com/ServiceStack/ServiceStack/wiki/Messaging-and-Redis" target="_blank" rel="noopener noreferrer">Redis MQ</a> has been extracted and encapsulated it into a re-usable class that can be used independently for handling messages published to specific <a href="http://redis.io/commands#pubsub" target="_blank" rel="noopener noreferrer">Redis Pub/Sub</a> channels.</p><p><code>RedisPubSubServer</code> processes messages in a managed background thread that <strong>automatically reconnects</strong> when the redis-server connection fails and works like an independent background Service that can be stopped and started on command.</p><p>The public API is captured in the <a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Interfaces/Redis/IRedisPubSubServer.cs" target="_blank" rel="noopener noreferrer">IRedisPubSubServer</a> interface:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisPubSubServer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">IRedisClientsManager</span> ClientsManager <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// What Channels it&#39;s subscribed to</span>
    <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Channels <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Run once on initial StartUp</span>
    <span class="token return-type class-name">Action</span> OnInit <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Called each time a new Connection is Started</span>
    <span class="token return-type class-name">Action</span> OnStart <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Invoked when Connection is broken or Stopped</span>
    <span class="token return-type class-name">Action</span> OnStop <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Invoked after Dispose()</span>
    <span class="token return-type class-name">Action</span> OnDispose <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Fired when each message is received</span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> OnMessage <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Fired after successfully subscribing to the specified channels</span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> OnUnSubscribe <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Called when an exception occurs </span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span> OnError <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Called before attempting to Failover to a new redis master</span>
    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>IRedisPubSubServer<span class="token punctuation">&gt;</span></span> OnFailover <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> KeepAliveRetryAfterMs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// The Current Time for RedisServer</span>
    <span class="token return-type class-name">DateTime</span> CurrentServerTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Current Status: Starting, Started, Stopping, Stopped, Disposed</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Different life-cycle stats</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetStatsDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Subscribe to specified Channels and listening for new messages</span>
    <span class="token return-type class-name">IRedisPubSubServer</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Close active Connection and stop running background thread</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Stop than Start</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><p>To use <code>RedisPubSubServer</code>, initialize it with the channels you want to subscribe to and assign handlers for each of the events you want to handle. At a minimum you&#39;ll want to handle <code>OnMessage</code>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> clientsManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PooledRedisClientManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> redisPubSub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisPubSubServer</span><span class="token punctuation">(</span>clientsManager<span class="token punctuation">,</span> <span class="token string">&quot;channel-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;channel-2&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        OnMessage <span class="token operator">=</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Received &#39;{0}&#39; from &#39;{1}&#39;&quot;</span><span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> channel<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Calling <code>Start()</code> after it&#39;s initialized will get it to start listening and processing any messages published to the subscribed channels.</p>__VP_STATIC_END__`,8),o=[p];function c(u,l,i,r,k,d){return a(),s("div",null,o)}var b=n(e,[["render",c]]);export{g as __pageData,b as default};
