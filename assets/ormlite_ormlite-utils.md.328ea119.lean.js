import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const g='{"title":"OrmLite Utils","description":"","frontmatter":{"title":"OrmLite Utils"},"headers":[{"level":2,"title":"Parametrized IN Values","slug":"parametrized-in-values"},{"level":2,"title":"Spread Util","slug":"spread-util"},{"level":2,"title":"Lazy Queries","slug":"lazy-queries"},{"level":2,"title":"Save Methods","slug":"save-methods"},{"level":2,"title":"Other examples","slug":"other-examples"},{"level":2,"title":"Other Notes","slug":"other-notes"}],"relativePath":"ormlite/ormlite-utils.md","lastUpdated":1645007721717}',p={},e=t(`__VP_STATIC_START__<p>The <code>Sql.In()</code> API supports nesting and combining of multiple Typed SQL Expressions together in a single SQL Query, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> usaCustomerIds <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Country <span class="token operator">==</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> usaCustomerOrders <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Sql<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>CustomerId<span class="token punctuation">,</span> usaCustomerIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>By using <code>Sql.In</code> from within a <code>SqlExpression&lt;T&gt;</code>, multiple values can be checked for a match in your query.</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Author<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Sql<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>City<span class="token punctuation">,</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Madrid&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> cities <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Madrid&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Berlin&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Author<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Sql<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>City<span class="token punctuation">,</span> cities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="parametrized-in-values" tabindex="-1">Parametrized IN Values <a class="header-anchor" href="#parametrized-in-values" aria-hidden="true">#</a></h2><p>OrmLite also supports providing collection of values which is automatically split into multiple DB parameters to simplify executing parameterized SQL with multiple IN Values, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> ids <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Id in (@ids)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> ids <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qux&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Table WHERE Name IN (@names)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> names <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="spread-util" tabindex="-1">Spread Util <a class="header-anchor" href="#spread-util" aria-hidden="true">#</a></h2><p>The <code>SqlSpread()</code> API is useful to generate an escaped list of parameterized values for use in SQL <code>IN()</code> statements and SQL functions:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> dialect <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Dialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dialect<span class="token punctuation">.</span><span class="token function">SqlSpread</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//= 1,2,3</span>
dialect<span class="token punctuation">.</span><span class="token function">SqlSpread</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//= &#39;A&#39;,&#39;B&#39;,&#39;C&#39;</span>
dialect<span class="token punctuation">.</span><span class="token function">SqlSpread</span><span class="token punctuation">(</span><span class="token string">&quot;A&#39;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C\\&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//= &#39;A&#39;&#39;B&#39;,&#39;C\\&quot;D&#39;</span>
</code></pre></div><h2 id="lazy-queries" tabindex="-1">Lazy Queries <a class="header-anchor" href="#lazy-queries" aria-hidden="true">#</a></h2><p>APIs ending with <code>Lazy</code> yield an IEnumerable sequence letting you stream the results without having to map the entire resultset into a disconnected List of POCO&#39;s first, e.g:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> lazyQuery <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SelectLazy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Age &gt; @age&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> age <span class="token operator">=</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Iterate over a lazy sequence </span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> person <span class="token keyword">in</span> lazyQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//...  </span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="save-methods" tabindex="-1">Save Methods <a class="header-anchor" href="#save-methods" aria-hidden="true">#</a></h2><p><code>Save</code> and <code>SaveAll</code> will Insert if no record with <strong>Id</strong> exists, otherwise it Updates.</p><p><code>Save</code> will populate any <code>[AutoIncrement]</code> or <code>[AutoId]</code> Primary Keys, e.g:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
item<span class="token punctuation">.</span>Id <span class="token comment">// RDBMS populated Auto Id </span>
</code></pre></div><p>Alternatively you can also manually Select and Retrieve the Inserted RDBMS Auto Id in a single query with <code>Insert</code> APIs by specifying <code>selectIdentity:true</code>:</p><div class="language-csharp"><pre><code>item<span class="token punctuation">.</span>Id <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token named-parameter punctuation">selectIdentity</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="other-examples" tabindex="-1">Other examples <a class="header-anchor" href="#other-examples" aria-hidden="true">#</a></h2><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> topVIPs <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">WhereLazy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> Age <span class="token operator">=</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> <span class="token function">IsVip</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="other-notes" tabindex="-1">Other Notes <a class="header-anchor" href="#other-notes" aria-hidden="true">#</a></h2><ul><li>All <strong>Insert</strong>, <strong>Update</strong>, and <strong>Delete</strong> methods take multiple params, while <code>InsertAll</code>, <code>UpdateAll</code> and <code>DeleteAll</code> take IEnumerables.</li><li>Methods containing the word <strong>Each</strong> return an <code>IEnumerable&lt;T&gt;</code> and are lazily loaded (i.e. non-buffered).</li></ul>__VP_STATIC_END__`,23),o=[e];function c(l,u,i,r,k,d){return a(),s("div",null,o)}var h=n(p,[["render",c]]);export{g as __pageData,h as default};
