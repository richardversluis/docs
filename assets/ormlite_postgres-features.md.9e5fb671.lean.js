import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const y='{"title":"PostgreSQL Features","description":"","frontmatter":{"title":"PostgreSQL Features"},"headers":[{"level":2,"title":"PostgreSQL Rich Data Types","slug":"postgresql-rich-data-types"},{"level":2,"title":"PostgreSQL Params","slug":"postgresql-params"},{"level":2,"title":"Hstore support","slug":"hstore-support"},{"level":2,"title":"JSON data types","slug":"json-data-types"},{"level":2,"title":"Custom SQL using PostgreSQL Arrays","slug":"custom-sql-using-postgresql-arrays"}],"relativePath":"ormlite/postgres-features.md","lastUpdated":1645007721717}',p={},o=t(`__VP_STATIC_START__<h2 id="postgresql-rich-data-types" tabindex="-1">PostgreSQL Rich Data Types <a class="header-anchor" href="#postgresql-rich-data-types" aria-hidden="true">#</a></h2><p>The <code>[PgSql*]</code> specific attributes lets you use attributes to define PostgreSQL rich data types, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPostgreSqlTable</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlJson</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span> AsJson <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlJsonB</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Poco<span class="token punctuation">&gt;</span></span> AsJsonB <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlTextArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AsTextArray <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlIntArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AsIntArray <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlBigIntArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AsLongArray <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>By default, all arrays of .NET&#39;s built-in <strong>numeric</strong>, <strong>string</strong> and <strong>DateTime</strong> types will be stored in PostgreSQL array types:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Ints <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Longs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Floats <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Doubles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Decimals <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Strings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">[</span><span class="token punctuation">]</span></span> DateTimes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTimeOffset<span class="token punctuation">[</span><span class="token punctuation">]</span></span> DateTimeOffsets <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You can opt in to annotate other collections like <code>List&lt;T&gt;</code> to also be stored in array types by annotating them with <code>[Pgsql*]</code> attributes, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Table</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlIntArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ListInts <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlBigIntArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> ListLongs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlFloatArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> ListFloats <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlDoubleArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> ListDoubles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlDecimalArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> ListDecimals <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlTextArray</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ListStrings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlTimestamp</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span> ListDateTimes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlTimestampTz</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>DateTimeOffset<span class="token punctuation">&gt;</span></span> ListDateTimeOffsets <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Alternatively if you <strong>always</strong> want <code>List&lt;T&gt;</code> stored in Array types, you can register them in the <code>PostgreSqlDialect.Provider</code>:</p><div class="language-csharp"><pre><code>PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlStringArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlIntArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlLongArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlFloatArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlDoubleArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlDecimalArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlDateTimeTimeStampArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
PostgreSqlDialect<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterConverter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>DateTimeOffset<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlDateTimeOffsetTimeStampTzArrayConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="postgresql-params" tabindex="-1">PostgreSQL Params <a class="header-anchor" href="#postgresql-params" aria-hidden="true">#</a></h2><p>The <code>PgSql.Param()</code> API provides a resolve the correct populated <code>NpgsqlParameter</code> and <code>NpgsqlDbType</code> from a C# Type which can be used to query custom PostgreSQL Data Types in APIs that accept <code>IDbDataParameter</code> parameters, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionResult</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Val <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> PgSql<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;paramValue&quot;</span><span class="token punctuation">,</span> testVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM my_func(@paramValue)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FunctionResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> p <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="hstore-support" tabindex="-1">Hstore support <a class="header-anchor" href="#hstore-support" aria-hidden="true">#</a></h2><p>To use <code>hstore</code>, its extension needs to be enabled in your PostgreSQL RDBMS by running:</p><div class="language-"><pre><code>CREATE EXTENSION hstore;
</code></pre></div><p>Which can then be enabled in OrmLite with:</p><div class="language-csharp"><pre><code>PostgreSqlDialect<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>UseHstore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>Where it will now store <strong>string Dictionaries</strong> in <code>Hstore</code> columns:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableHstore</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Dictionary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> IDictionary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DropAndCreateTable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TableHstore<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TableHstore</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    IDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where they can than be queried in postgres using <a href="https://www.postgresql.org/docs/9.0/hstore.html" target="_blank" rel="noopener noreferrer">Hstore SQL Syntax</a>:</p><div class="language-csharp"><pre><code>db<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">From</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PostgreSqlTypes<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;dictionary -&gt; &#39;A&#39; = &#39;1&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Id <span class="token comment">//= 1</span>
</code></pre></div><p>Thanks to <a href="https://forums.servicestack.net/users/cthames/activity" target="_blank" rel="noopener noreferrer">@cthames</a> for this feature.</p><h2 id="json-data-types" tabindex="-1">JSON data types <a class="header-anchor" href="#json-data-types" aria-hidden="true">#</a></h2><p>If you instead wanted to store arbitrary complex types in PostgreSQL&#39;s rich column types to enable deep querying in postgres, you&#39;d instead annotate them with <code>[PgSqlJson]</code> or <code>[PgSqlJsonB]</code>, e.g:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableJson</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlJson</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ComplexType</span> ComplexTypeJson <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PgSqlJsonB</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ComplexType</span> ComplexTypeJsonb <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TableJson</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    ComplexTypeJson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComplexType</span> <span class="token punctuation">{</span>
        Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> SubType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubType</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;JSON&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ComplexTypeJsonb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComplexType</span> <span class="token punctuation">{</span>
        Id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> SubType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubType</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;JSONB&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Where they can then be queried on the server with <a href="https://www.postgresql.org/docs/9.3/functions-json.html" target="_blank" rel="noopener noreferrer">JSON SQL Syntax and functions</a>:</p><div class="language-csharp"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TableJson<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;table_json-&gt;&#39;SubType&#39;-&gt;&gt;&#39;Name&#39; = &#39;JSON&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="custom-sql-using-postgresql-arrays" tabindex="-1">Custom SQL using PostgreSQL Arrays <a class="header-anchor" href="#custom-sql-using-postgresql-arrays" aria-hidden="true">#</a></h2><p>The <code>PgSql.Array()</code> provides a typed API for generating <a href="https://www.postgresql.org/docs/current/arrays.html" target="_blank" rel="noopener noreferrer">PostgreSQL Array Expressions</a>, e.g:</p><div class="language-csharp"><pre><code>PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment">//= ARRAY[1,2,3]</span>
<span class="token class-name"><span class="token keyword">var</span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>   <span class="token comment">//= ARRAY[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]</span>
</code></pre></div><p>Which you can safely use in Custom SQL Expressions that use PostgreSQL&#39;s native ARRAY support:</p><div class="language-csharp"><pre><code>q<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>anyTechnologyIds<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &amp;&amp; technology_ids&quot;</span></span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span>labelSlugs<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &amp;&amp; labels&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>If you want and empty collection to return <code>null</code> instead of an empty <code>ARRAY[]</code> you can use the <code>nullIfEmpty</code> overload:</p><div class="language-csharp"><pre><code>PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullIfEmpty</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment">//= null</span>
PgSql<span class="token punctuation">.</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">nullIfEmpty</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//= ARRAY[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]</span>
</code></pre></div>__VP_STATIC_END__`,34),e=[o];function c(l,u,k,i,r,d){return a(),s("div",null,e)}var m=n(p,[["render",c]]);export{y as __pageData,m as default};
