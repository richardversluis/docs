import{_ as n,c as s,o as a,a as t}from"./app.64b20f26.js";const y='{"title":"Redis Typed Client","description":"","frontmatter":{"slug":"typed-client","title":"Redis Typed Client"},"headers":[{"level":2,"title":"Strongly typed Generic Client API","slug":"strongly-typed-generic-client-api"},{"level":2,"title":"Common data access interface","slug":"common-data-access-interface"}],"relativePath":"redis/typed-client.md","lastUpdated":1645007721741}',p={},e=t(`<p>A &#39;strongly-typed&#39; API available on <a href="https://github.com/ServiceStack/ServiceStack.Redis" target="_blank" rel="noopener noreferrer">Service Stack&#39;s C# Redis Client</a> to make all Redis Value operations to apply against any c# type</p><h2 id="strongly-typed-generic-client-api" tabindex="-1">Strongly typed Generic Client API <a class="header-anchor" href="#strongly-typed-generic-client-api" aria-hidden="true">#</a></h2><p>Below is the strongly-typed API that you have access to after you call <code>IRedisClient.As&lt;T&gt;()</code> e.g.:</p><div class="language-csharp"><pre><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> redisClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> redis <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyPocoType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The redis variable now holds a strongly-typed generic client that allows Redis value operations to apply against <code>MyPocoType</code>. The interface below lists all available operations:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRedisTypedClient<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBasicPersistenceProvider<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">IHasNamed<span class="token punctuation">&lt;</span>IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> Lists <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name">IHasNamed<span class="token punctuation">&lt;</span>IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> Sets <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name">IHasNamed<span class="token punctuation">&lt;</span>IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> SortedSets <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetHash</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> hashId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IRedisTypedTransaction<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">CreateTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IDisposable</span> <span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDisposable</span> <span class="token function">AcquireLock</span><span class="token punctuation">(</span><span class="token class-name">TimeSpan</span> timeOut<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">int</span></span> Db <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">T</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">string</span></span> SequenceKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetSequence</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNextSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">RedisKeyType</span> <span class="token function">GetEntryType</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetRandomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetEntry</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetEntry</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> expireIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SetEntryIfNotExists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">GetAndSetValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RemoveEntry</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RemoveEntry</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RemoveEntry</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">IHasStringId<span class="token punctuation">[</span><span class="token punctuation">]</span></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">IncrementValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">IncrementValueBy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">DecrementValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">DecrementValueBy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ExpireEntryIn</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> expiresAt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ExpireEntryAt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">TimeSpan</span> <span class="token function">GetTimeToLive</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SaveAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FlushDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FlushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">SearchKeys</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetSortedEntryValues</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> startingFrom<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> endingAt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetAllItemsFromSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddItemToSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> toSet<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RemoveItemFromSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">PopItemFromSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveBetweenSets</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">,</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> toSet<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetSetCount</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SetContainsItem</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetIntersectFromSets</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StoreIntersectFromSets</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> intoSet<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetUnionFromSets</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StoreUnionFromSets</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> intoSet<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> sets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetDifferencesFromSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> withSets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StoreDifferencesFromSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> intoSet<span class="token punctuation">,</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> withSets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">GetRandomItemFromSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetAllItemsFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> startingFrom<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> endingAt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">SortList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> startingFrom<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> endingAt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddItemToList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrependItemToList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">RemoveStartFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">BlockingRemoveStartFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">RemoveEndFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RemoveAllFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TrimList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> keepStartingFrom<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> keepEndingAt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">RemoveItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">RemoveItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> noOfMatches<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetListCount</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">GetItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> listIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetItemInList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> toList<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> listIndex<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Queue operations</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EnqueueItemOnList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">DequeueItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">BlockingDequeueItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeOut<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Stack operations</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PushItemToList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">PopItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">BlockingPopItemFromList</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">PopAndPushItemBetweenLists</span><span class="token punctuation">(</span><span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromList<span class="token punctuation">,</span> <span class="token class-name">IRedisList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> toList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddItemToSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> toSet<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddItemToSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> toSet<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RemoveItemFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">PopItemWithLowestScoreFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token function">PopItemWithHighestScoreFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> fromSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SortedSetContainsItem</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">IncrementItemInSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> incrementBy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetItemIndexInSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetItemIndexInSortedSetDesc</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetAllItemsFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetAllItemsFromSortedSetDesc</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> fromRank<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> toRank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetDesc</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> fromRank<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> toRank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAllWithScoresFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> fromRank<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> toRank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetDesc</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> fromRank<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> toRank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByLowestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fromStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> toStringScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetRangeWithScoresFromSortedSetByHighestScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> skip<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">RemoveRangeFromSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> minRank<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> maxRank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">RemoveRangeFromSortedSetByScore</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> fromScore<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> toScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetSortedSetCount</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetItemScoreInSortedSet</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">StoreIntersectFromSortedSets</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> intoSetId<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> setIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">StoreUnionFromSortedSets</span><span class="token punctuation">(</span><span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> intoSetId<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">IRedisSortedSet<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> setIds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">HashContainsEntry</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">TKey</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">SetEntryInHash</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">TKey</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">SetEntryInHashIfNotExists</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">TKey</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">SetRangeInHash</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keyValuePairs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetValueFromHash</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">TKey</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">RemoveEntryFromHash</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">,</span> <span class="token class-name">TKey</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">GetHashCount</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetHashKeys</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetHashValues</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetAllEntriesFromHash</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">IRedisHash<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="common-data-access-interface" tabindex="-1">Common data access interface <a class="header-anchor" href="#common-data-access-interface" aria-hidden="true">#</a></h2><p>Including the above methods, the Generic client also implements Redis non-specific common data access operations that can be easily implemented by other data persistence providers should you want to swap providers in future.</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBasicPersistenceProvider<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">T</span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetByIds</span><span class="token punctuation">(</span><span class="token class-name">ICollection<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">T</span> <span class="token function">Store</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StoreAll</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteByIds</span><span class="token punctuation">(</span><span class="token class-name">ICollection<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Generally, if you only have basic persistence needs I would recommend developing against the above common data access API as it is easier for other persistence providers to implement and increases the likely hood that your library can be reused as-is to persist against other data stores i.e. against an RDBMS with OrmLite, etc.</p>`,10),o=[e];function c(l,u,k,i,r,d){return a(),s("div",null,o)}var S=n(p,[["render",c]]);export{y as __pageData,S as default};
