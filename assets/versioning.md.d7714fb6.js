import{_ as n,c as s,o as a,a as e}from"./app.64b20f26.js";const m='{"title":"Implicit Versioning","description":"","frontmatter":{"slug":"versioning"},"headers":[{"level":2,"title":"Implicit Versioning","slug":"implicit-versioning"},{"level":3,"title":"Version Abbreviation Convention","slug":"version-abbreviation-convention"}],"relativePath":"versioning.md","lastUpdated":1645007721769}',t={},o=e(`<h2 id="implicit-versioning" tabindex="-1">Implicit Versioning <a class="header-anchor" href="#implicit-versioning" aria-hidden="true">#</a></h2><p>You can populate Version numbers in all Request DTO&#39;s implementing <code>IHasVersion</code>, i.e:</p><div class="language-csharp"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReturn<span class="token punctuation">&lt;</span>HelloResponse<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IHasVersion</span></span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Version <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>By assigning the <code>Version</code> property on the Service Clients, e.g:</p><div class="language-csharp"><pre><code>client<span class="token punctuation">.</span>Version <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div><p>Which will auto populate each Request DTO that implements <code>IHasVersion</code>, e.g:</p><div class="language-csharp"><pre><code>client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hello</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Hello.Version=2</span>
</code></pre></div><h3 id="version-abbreviation-convention" tabindex="-1">Version Abbreviation Convention <a class="header-anchor" href="#version-abbreviation-convention" aria-hidden="true">#</a></h3><p>A popular convention for specifying versions in API requests is with the <code>?v=1</code> QueryString which ServiceStack now uses as a fallback for populating any Request DTO&#39;s that implement <code>IHasVersion</code> (as above).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>as ServiceStack&#39;s message-based design promotes forward and backwards-compatible Service API designs, our recommendation is to only consider implementing versioning when necessary, at which point check out our <a href="http://stackoverflow.com/a/12413091/85785" target="_blank" rel="noopener noreferrer">recommended versioning strategy</a></p></div>`,10),p=[o];function c(i,r,l,u,d,k){return a(),s("div",null,p)}var g=n(t,[["render",c]]);export{m as __pageData,g as default};
